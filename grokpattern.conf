input {
  beats {
    port => 5044
  }
}

filter{

  if "Accepted password for" in [message]{
    grok{
      match => { "message" => "%{SYSLOGTIMESTAMP:Time} (?<Host>[\w\-]+[\w\-]) (?<SSHD>[\w\[\]0-9\:]+[\w\-\[\]0-9\:]) Accepted password for %{WORD:User} from %{IP:IPAddress}"}
    }

    mutate{
        remove_field => ["Host","SSHD"]
        add_tag => ["SSHAccess"]
    }
  }

  else if "user NOT in sudoers" in [message]{

    grok{
      match => {"message" => "%{SYSLOGTIMESTAMP:Time} (?<Host>[\w\-]+[\w\-]) (?<SUDO>sudo)(?<User>:(.*?):)"}
    } 
    mutate{
      remove_field =>["Host","SUDO"]
      gsub => [ "User","[\:\s]",""]
      add_tag => ["NotSudoUser"]
    }
  }
  
  else if "TTY" in [message]{
    grok{
      match => {"message" => "%{SYSLOGTIMESTAMP:Time} (?<Host>[\w\-]+[\w\-]) (?<SUDO>sudo)(?<User>:(.*?):)"}
    }

    mutate{
      remove_field =>["Host","SUDO"]
      gsub => [ "User","[\:\s]",""]
      add_tag => ["RootAccess"]
    }
  }

  else if "Invalid user" in [message]{
    grok{
      match => {"message" => "%{SYSLOGTIMESTAMP:Time} (?<Host>[\w\-]+[\w\-]) (?<SSHD>[\w\[\]0-9\:]+[\w\-\[\]0-9\:]) Invalid user %{WORD:User} from %{IP:IPAddress}"}
    }

    mutate{
      remove_field =>["Host","SSHD"]
      add_tag => ["InvalidUser"]
    }
  }

  else if [log][file][path] == "/opt/Filebeat_Logs/SSHFail.log"{
    
    grok{
      match => {"message" => "%{SYSLOGTIMESTAMP:Time} %{WORD:User} %{IP:IPAddress}" }
    }

    mutate{
      add_tag => ["SSHFail"]
    }
  }

  else if [log][file][path] == "/opt/Filebeat_Logs/SessionPeriod.log"{
    grok{
      match => {"message" => "%{SYSLOGTIMESTAMP:TimeOut} %{SYSLOGTIMESTAMP:TimeIN} %{WORD:User} %{IP:IPAddress} (?<Duration>\d:\d\d:\d\d)"}
    }
    mutate{
      add_tag => ["SessionPeriod"]
    }
  }

  else{
    drop{}
  }

}

output {    
    stdout { codec => rubydebug }

    elasticsearch{
      hosts => ["localhost:9200"]
      index => "auth-log-manage"
  }
}